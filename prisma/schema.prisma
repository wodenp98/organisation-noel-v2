generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String
  username      String          @unique
  password      String          @unique
  email         String?         @unique
  emailVerified DateTime?
  nameOfPoll    String?
  hasFor        String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]
  
  givenDraws    Draw[]          @relation("Giver")
  receivedDraws Draw[]          @relation("Receiver")

  userMenus UserMenu[]
}

model Menu {
  id           String    @id @default(cuid())
  entries      String?
  flat         String?
  desserts     String?
  userMenus    UserMenu[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model UserMenu {
  id        String   @id @default(cuid())
  userId    String
  menuId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  menu      Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  
  @@unique([userId, menuId])
}


model Draw {
  id          String    @id @default(cuid())
  isRevealed  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  giver       User      @relation("Giver", fields: [giverId], references: [id], onDelete: Cascade)
  giverId     String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId  String

  @@unique([giverId]) 
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}